/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import static java.lang.System.exit;

import java.io.IOException;
import java.io.ObjectOutputStream;

import javax.crypto.SecretKey;
import javax.swing.JScrollBar;
import javax.swing.JTextArea;

/**
 *
 * @author Timothy
 */
public class ClientMsgGUI extends javax.swing.JFrame {

	public static Client client;
    /**
     * Creates new form MessageIO
     */
    public ClientMsgGUI(String title) {
        initComponents();
        this.setTitle(title);
        client = new Client();
        client.gui = this;
        new Thread(){
        	public void run(){
                client.start();

        	}
        }.start();

    }
    
    public ClientMsgGUI(String title, Client client1) {
        initComponents();
        this.setTitle(title);
        client = client1;
        //client.start();
        client.gui =this;
        
        new Thread(){
        	public void run(){
                client.start();

        	}
        }.start();

    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        messages = new javax.swing.JTextArea();
        sendBtn = new javax.swing.JButton();
        messageInput = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("AsyncMessageIO");

        messages.setColumns(20);
        messages.setRows(5);
        jScrollPane1.setViewportView(messages);

        sendBtn.setText("Send");
        sendBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendBtnActionPerformed(evt);
            }
        });
       

        messageInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messageInputActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sendBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(messageInput)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sendBtn)
                    .addComponent(messageInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	public static void sendMessageAsync(String message, SecretKey[] sessionKeys, boolean enableConfidential, boolean enableIntegrity, ObjectOutputStream objOut){
		
		new Thread(){
			public void run(){
		
		try {

				if (!message.equals("") && message != null) {

					// Wrap message in class; input params to control
					// confidentiality
					// and integrity
					EncryptedMessage eMsg = new EncryptedMessage(message,
							sessionKeys[0], sessionKeys[1],
							enableConfidential, enableIntegrity);

					// write message
					objOut.writeObject(eMsg);
					//printMessage("Client: " + message);

					// System.out.println("Client: Waiting for Server's response.");
				}
					

				
			} catch (IOException e) {
				exit(-1);
				e.printStackTrace();
				return;
			}
			}
		}.start();
	}

    
    private void sendBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendBtnActionPerformed

        String msg = messageInput.getText();
        if(!msg.equals("")){
            //printMessageAsync(msg);
            this.client.printMessage("Client:" + msg);
        }
     
        sendMessageAsync(msg, this.client.sessionKeys, this.client.enableConfidential, this.client.enableIntegrity, this.client.objOut);
        
        //auto scroll
        JScrollBar vertical = jScrollPane1.getVerticalScrollBar();
        vertical.setValue( vertical.getMaximum() );
        
        //clear input
        messageInput.setText("");
        
        
    }//GEN-LAST:event_sendBtnActionPerformed

    private void messageInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messageInputActionPerformed
        
    }//GEN-LAST:event_messageInputActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientMsgGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientMsgGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientMsgGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientMsgGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ClientMsgGUI gui = new ClientMsgGUI("ClientMessageGUI");
                gui.setVisible(true);
                
                
                //for(int i = 0; i < 10; i++){
                    //printMessageAsync("Hello World");
                //}
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField messageInput;
    private static javax.swing.JTextArea messages;
    private javax.swing.JButton sendBtn;
    // End of variables declaration//GEN-END:variables

public void printMessageAsync(String message){
    
        new Thread(){
            
            public void run() {
                messages.append(message + "\n");
            }
            
        }.start();
    
    }


public void printMessage(String message){
   
	messages.append(message + "\n");

}

public String getMessageInput(){
	return messageInput.getText();
}


}


